// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef DATATRANS_SWIFT_H
#define DATATRANS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import PassKit;
#endif

#import <Datatrans/Datatrans.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Datatrans",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol DTApplePayDelegate;
@class PKPaymentRequest;

/// Configuration object for Apple Pay transactions.
SWIFT_CLASS_NAMED("ApplePayConfig")
@interface DTApplePayConfig : NSObject <NSCopying>
/// Delegate object for callbacks during Apple Pay authorization
@property (nonatomic, weak) id <DTApplePayDelegate> _Nullable delegate;
/// Use this label to configure the final summary of the purchase. The default
/// label is “Total”, but you can also replace it with the name of your shop.
/// The string will then read: PAY YOURSHOP: XX.XX
@property (nonatomic, copy) NSString * _Nullable finalSummaryItemLabel;
/// The request object for further configuration of Apple Pay. Please refer to
/// the official Apple Pay documentation for more information.
@property (nonatomic, readonly, strong) PKPaymentRequest * _Nonnull request;
/// Shows Apple Pay additionally on the token selection screen as  a <code>token</code>.
@property (nonatomic) BOOL showApplePayAsToken;
/// Use this option to show Apple Pay as a payment button instead of a
/// listed payment method.
@property (nonatomic) BOOL showLargeButton;
/// Although the library automatically hides Apple Pay if no cards are supported,
/// this shows if Apple Pay is available for the specified card acquirers.
/// \param supportedNetworks Supported card acquirers.
///
///
/// returns:
/// True if Apple Pay is available on the device, false if it is unavailable.
+ (BOOL)hasApplePayWithSupportedNetworks:(NSArray<PKPaymentNetwork> * _Nonnull)supportedNetworks SWIFT_WARN_UNUSED_RESULT;
/// Creates a new Apple Pay configuration object with an Apple Pay country code.
/// If no countryCode is specified, the SDK will set Switzerland as the country code.
/// \param applePayMerchantId The merchant identifier (Merchant ID) at Apple,
/// which you created together with the CSR file provided by Datatrans.
///
/// \param supportedNetworks Supported card acquirers.
///
/// \param countryCode Apple Pay country code
///
- (nonnull instancetype)initWithApplePayMerchantId:(NSString * _Nonnull)applePayMerchantId supportedNetworks:(NSArray<PKPaymentNetwork> * _Nonnull)supportedNetworks countryCode:(NSString * _Nonnull)countryCode OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithApplePayMerchantId:(NSString * _Nonnull)applePayMerchantId supportedNetworks:(NSArray<PKPaymentNetwork> * _Nonnull)supportedNetworks;
/// Refer to the <code>NSCopying</code> protocol
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum DTPaymentMethodType : NSInteger;
@class NSCoder;

/// This is the base class for payment methods. It contains a type to identify the
/// payment method, e.g. Visa or Mastercard.
SWIFT_CLASS_NAMED("PaymentMethod")
@interface DTPaymentMethod : NSObject <NSCoding, NSCopying>
/// Payment method type, e.g. Visa
@property (nonatomic, readonly) enum DTPaymentMethodType type;
/// This init method initializes a <code>PaymentMethod</code> object with the
/// payment method type.
/// \param type Payment method type, e.g. Visa
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type OBJC_DESIGNATED_INITIALIZER;
/// Refer to the <code>NSCopying</code> protocol
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Refer to the <code>NSCoding</code> protocol
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Refer to the <code>NSCoding</code> protocol
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DTCardExpiryDate;

/// Use this class to process raw card data for payments. You should use
/// this class if your app takes over the user interface for the card input fields.
SWIFT_CLASS_NAMED("Card")
@interface DTCard : DTPaymentMethod
/// Card number
@property (nonatomic, copy) NSString * _Nonnull number;
/// Expiry date
@property (nonatomic, strong) DTCardExpiryDate * _Nonnull expiryDate;
/// Card security code - nil if the card does not have a card security code.
@property (nonatomic, copy) NSString * _Nullable cvv;
/// Cardholder’s name
@property (nonatomic, copy) NSString * _Nullable cardholder;
/// Use this to initialize a card object with the card data.
/// \param type Card type, e.g. Visa or Mastercard
///
/// \param number Card number
///
/// \param expiryDate Expiry date
///
/// \param cvv Card security code - nil if the card does not have a card security code.
///
/// \param cardholder Cardholder’s name
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type number:(NSString * _Nonnull)number expiryDate:(DTCardExpiryDate * _Nonnull)expiryDate cvv:(NSString * _Nullable)cvv cardholder:(NSString * _Nullable)cardholder OBJC_DESIGNATED_INITIALIZER;
/// Refer to the <code>NSCoding</code> protocol
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type SWIFT_UNAVAILABLE;
@end


/// Class to be used to represent the card expiry date (month and year).
SWIFT_CLASS_NAMED("CardExpiryDate")
@interface DTCardExpiryDate : NSObject <NSCopying>
/// Formats the month to a two digit string.
@property (nonatomic, readonly, copy) NSString * _Nonnull formattedMonth;
/// Formats the year to a two digit string.
@property (nonatomic, readonly, copy) NSString * _Nonnull formattedYear;
/// Card expiry month, [1, 12], e.g. 1 for January or 12 for December
@property (nonatomic) NSInteger month;
/// Card expiry year, 2 or 4 digits, e.g. 30 or 2030
@property (nonatomic) NSInteger year;
/// Initializes the card expiry date with the given month and year.
/// \param month Card expiry month, [1, 12], e.g. 1 for January or 12 for December
///
/// \param year Card expiry year, 2 or 4 digits, e.g. 30 or 2030
///
- (nonnull instancetype)initWithMonth:(NSInteger)month year:(NSInteger)year OBJC_DESIGNATED_INITIALIZER;
/// Refer to the <code>NSObject</code> protocol
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Refer to the <code>NSCopying</code> protocol
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class is the base token class to gather token information and process
/// recurring payments or fast checkouts with any payment method. This class
/// is sufficient to process payments with tokens of some payment methods
/// (e.g. Twint). More complex payment methods require you to specify some
/// more details in their token subclasses (e.g. card payments, PostFinance, etc.).
/// Please refer to the list below to see if you need to call an additional token
/// subclass for your payments.
/// <ul>
///   <li>
///     Easy payment methods: Swisscom Easypay, SEPA (ELV), Twint,
///     Apple Pay, Byjuno, SwissPass, Powerpay Invoice
///   </li>
///   <li>
///     Complex payment methods (requiring token subclass): Card payments,
///     PayPal, PostFinance, Reka
///   </li>
/// </ul>
/// Please refer to the Datatrans documentation to see if you can register a
/// token during payment or require a dedicated registration.
SWIFT_CLASS_NAMED("PaymentMethodToken")
@interface DTPaymentMethodToken : DTPaymentMethod
/// The token that can be used to process recurring payments or fast checkouts.
@property (nonatomic, copy) NSString * _Nonnull token;
/// A human readable title.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayTitle;
/// For VoiceOver this title is used instead of displayTitle.
@property (nonatomic, readonly, copy) NSString * _Nullable accessibilityTitle;
/// This init method has to be used to initialize a payment object.
/// \param type Payment method type, e.g. PayPal or Twint
///
/// \param token The token that can be used to process recurring payments or fast checkouts.
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type token:(NSString * _Nonnull)token OBJC_DESIGNATED_INITIALIZER;
/// Creates a <code>PaymentMethodToken</code> from a JSON string.
/// Note that this function should only be used for iOS 12 and earlier.  Use
/// <code>create(data:decoder:)</code> for later versions.
/// \param jsonString String of JSON encoded data
///
+ (DTPaymentMethodToken * _Nullable)createWithJsonString:(NSString * _Nonnull)jsonString SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Use create(data:decoder:) instead.");
/// Creates a <code>PaymentMethodToken</code> from data encoded by the old payment library.
/// \param legacyTokenData Data encoded by
/// <code>DTRecurringPaymentMethod.data()</code>, <code>DTCreditCard.data()</code>,
/// <code>DTPostFinanceCard.data()</code>, <code>DTReka.data()</code> or <code>DTPayPal.data()</code>.
///
///
/// returns:
/// The decoded <code>PaymentMethodToken</code>, <code>CardToken</code>,
/// <code>PostFinanceCardToken</code>, <code>RekaToken</code> or <code>PayPalToken</code>, if successful,
/// nil if <code>legacyTokenData</code> is invalid.
+ (DTPaymentMethodToken * _Nullable)createWithLegacyTokenData:(NSData * _Nonnull)legacyTokenData SWIFT_WARN_UNUSED_RESULT;
/// This function checks if the payment method token is valid. This function
/// will also be used to tell you if data (e.g. expiry date) from the token
/// subclasses is correct or not.
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// Refer to the <code>NSObject</code> protocol
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Refer to the <code>NSCoding</code> protocol
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Refer to the <code>NSCopying</code> protocol
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type SWIFT_UNAVAILABLE;
@end


/// This class contains the token information about a credit or debit card registration
/// from a previously completed transaction. Just like any other <code>PaymentMethodToken</code>
/// subclass, this class can be used to finalize a payment without user interaction or
/// to display a selection of saved token payments to the user for fast checkouts.
/// A token can be returned after completing a successful card payment or with a
/// dedicated registration.
SWIFT_CLASS_NAMED("CardToken")
@interface DTCardToken : DTPaymentMethodToken
/// Expiry date
@property (nonatomic, readonly, strong) DTCardExpiryDate * _Nullable cardExpiryDate;
/// The masked card number you can use to display that specific card in your app.
/// The masked card number shows the first 6 digits and the last 4 digits of the card,
/// e.g. 432930xxxxxx6095.
@property (nonatomic, readonly, copy) NSString * _Nullable maskedCardNumber;
/// Cardholder’s name
@property (nonatomic, copy) NSString * _Nullable cardholder;
/// Initializes a <code>CardToken</code> object with the given card data.
/// \param type Payment method type, e.g. Visa
///
/// \param token This is the token for the card, also known as alias.
/// This can be used to debit the card without further customer interaction.
///
/// \param cardExpiryDate Expiry date
///
/// \param maskedCardNumber The masked card number you can use to display
/// that specific card in your app. The masked card number shows the first 6
/// digits and the last 4 digits of the card, e.g. 432930xxxxxx6095.
///
/// \param cardholder Cardholder’s name
///
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type token:(NSString * _Nonnull)token cardExpiryDate:(DTCardExpiryDate * _Nullable)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder OBJC_DESIGNATED_INITIALIZER;
/// A human readable title e.g. ‘•••• 6095’.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayTitle;
/// For VoiceOver this title is used instead of displayTitle.
@property (nonatomic, readonly, copy) NSString * _Nullable accessibilityTitle;
/// Checks if the expiration date is in the future or not.
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// Refer to the <code>NSCoding</code> protocol
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Refer to the <code>NSObject</code> protocol
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Refer to the <code>NSCopying</code> protocol
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type token:(NSString * _Nonnull)token SWIFT_UNAVAILABLE;
@end




/// This class contains the token information about a PayPal registration from
/// a previously completed transaction. Just like any other <code>PaymentMethodToken</code>
/// subclass, this class can be used to finalize a payment without user interaction
/// or to show a selection of saved token payments to the user for fast checkouts.
/// A token can be returned after completing a successful PayPal payment or with a
/// dedicated registration.
SWIFT_CLASS_NAMED("PayPalToken")
@interface DTPayPalToken : DTPaymentMethodToken
/// PayPal e-mail address. This will be used for displaying purposes.
@property (nonatomic, copy) NSString * _Nullable payPalEmail;
/// This init method has to be used to initialize a PayPal payment object.
/// \param token Token for a PayPal account.
///
/// \param payPalEmail PayPal e-mail address. This will be used for displaying purposes.
///
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token payPalEmail:(NSString * _Nullable)payPalEmail OBJC_DESIGNATED_INITIALIZER;
/// A human readable title.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayTitle;
/// For VoiceOver this title is used instead of displayTitle.
@property (nonatomic, readonly, copy) NSString * _Nullable accessibilityTitle;
/// Refer to the <code>NSCoding</code> protocol
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Refer to the <code>NSCopying</code> protocol
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type token:(NSString * _Nonnull)token SWIFT_UNAVAILABLE;
@end



/// The payment method used during the transaction.
typedef SWIFT_ENUM_NAMED(NSInteger, DTPaymentMethodType, "PaymentMethodType", open) {
/// Visa payment method
  DTPaymentMethodTypeVisa = 0,
/// MasterCard payment method
  DTPaymentMethodTypeMasterCard = 1,
/// Diners Club payment method
  DTPaymentMethodTypeDinersClub = 2,
/// American Express payment method
  DTPaymentMethodTypeAmericanExpress = 3,
/// JCB payment method
  DTPaymentMethodTypeJCB = 4,
/// MyOne payment method
  DTPaymentMethodTypeMyOne = 5,
/// UATP payment method
  DTPaymentMethodTypeUATP = 6,
/// Discover payment method
  DTPaymentMethodTypeDiscover = 7,
/// SUPERCARD payment method
  DTPaymentMethodTypeSupercard = 8,
/// PostFinance Card payment method
  DTPaymentMethodTypePostFinanceCard = 9,
/// PostFinance E-Finance payment method
  DTPaymentMethodTypePostFinanceEFinance = 10,
/// PayPal payment method
  DTPaymentMethodTypePayPal = 11,
/// Easypay payment method
  DTPaymentMethodTypeEasypay = 12,
/// SEPA (ELV) payment method
  DTPaymentMethodTypeSEPA = 13,
/// SwissBilling payment method
  DTPaymentMethodTypeSwissBilling = 14,
/// Twint payment method
  DTPaymentMethodTypeTwint = 15,
/// Apple Pay payment method
  DTPaymentMethodTypeApplePay = 16,
/// Reka payment method
  DTPaymentMethodTypeReka = 17,
/// Byjuno payment method
  DTPaymentMethodTypeByjuno = 18,
/// SwissPass payment method
  DTPaymentMethodTypeSwissPass = 19,
/// Powerpay payment method
  DTPaymentMethodTypePowerpay = 20,
/// Paysafecard payment method
  DTPaymentMethodTypePaysafecard = 21,
/// Boncard (Lunch-Check) payment method
  DTPaymentMethodTypeBoncard = 22,
};


/// Use this class to map the payment method identifiers from Datatrans to the <code>PaymentMethodType</code>.
SWIFT_CLASS_NAMED("PaymentMethodTypeMapper")
@interface DTPaymentMethodTypeMapper : NSObject
/// This function returns the <code>PaymentMethodType</code> based on the Datatrans
/// payment method identifier.
/// \param identifier The payment method identifier from Datatrans
///
///
/// returns:
/// The payment method type, e.g. Visa
+ (enum DTPaymentMethodType)toTypeWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// This function returns the payment method identifier based on the
/// <code>PaymentMethodType</code>.
/// \param type The payment method type, e.g. Visa
///
///
/// returns:
/// The payment method identifier
+ (NSString * _Nonnull)toIdentifierWithType:(enum DTPaymentMethodType)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class contains the token information about a PostFinance Card  registration from
/// a previously completed transaction. Just like any other <code>PaymentMethodToken</code>
/// subclass, this class can be used to finalize a payment without user interaction
/// or to show a selection of saved token payments to the user for fast checkouts.
/// A token can be returned after completing a successful PostFinance Card payment or
/// with a dedicated registration.
SWIFT_CLASS_NAMED("PostFinanceCardToken")
@interface DTPostFinanceCardToken : DTCardToken
/// This init method has to be used to initialize a PostFinance Card payment object.
/// \param token Token for a PostFinance Card.
///
/// \param cardExpiryDate Expiry date
///
/// \param maskedCardNumber The masked card number you can use to display
/// that specific card in your app. The masked card number shows the last 4
/// digits of the card, e.g. **** 1234.
///
/// \param cardholder Cardholder’s name
///
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token cardExpiryDate:(DTCardExpiryDate * _Nullable)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder OBJC_DESIGNATED_INITIALIZER;
/// Refer to the <code>NSCoding</code> protocol
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Refer to the <code>NSCopying</code> protocol
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type token:(NSString * _Nonnull)token cardExpiryDate:(DTCardExpiryDate * _Nullable)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder SWIFT_UNAVAILABLE;
@end


/// This class contains the token information about a Reka card registration from
/// a previously completed transaction. Just like any other <code>PaymentMethodToken</code>
/// subclass, this class can be used to finalize a payment without user interaction
/// or to show a selection of saved token payments to the user for fast checkouts.
/// A token can be returned after completing a successful Reka payment or with a
/// dedicated registration.
SWIFT_CLASS_NAMED("RekaToken")
@interface DTRekaToken : DTCardToken
/// This init method has to be used to initialize a Reka payment object.
/// \param token Token for a Reka card.
///
/// \param cardExpiryDate Expiry date
///
/// \param maskedCardNumber The masked card number you can use to display
/// that specific card in your app. The masked card number shows the first 6
/// digits and the last 4 digits of the card, e.g. 123456xxxxxxxxx1234.
///
/// \param cardholder Cardholder’s name
///
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token cardExpiryDate:(DTCardExpiryDate * _Nonnull)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder;
/// Refer to the <code>NSCopying</code> protocol
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type token:(NSString * _Nonnull)token cardExpiryDate:(DTCardExpiryDate * _Nullable)cardExpiryDate maskedCardNumber:(NSString * _Nullable)maskedCardNumber cardholder:(NSString * _Nullable)cardholder OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class contains the token information about a SEPA (ELV) registration from
/// a previously completed transaction. Just like any other <code>PaymentMethodToken</code>
/// subclass, this class can be used to finalize a payment without user interaction
/// or to show a selection of saved token payments to the user for fast checkouts.
/// A token can be returned after completing a successful SEPA payment or with a
/// dedicated registration.
SWIFT_CLASS_NAMED("SEPAToken")
@interface DTSEPAToken : DTPaymentMethodToken
/// A bank code (German: Bankleitzahl) is a unique identification code for a
/// particular bank. This is required for tokens created before April 15th 2015.
@property (nonatomic, readonly, copy) NSString * _Nullable bankCode;
/// Token for SEPA (ELV).
@property (nonatomic, copy) NSString * _Nonnull token;
/// This init method has to be used to initialize a SEPA (ELV) payment object.
/// \param token Token for SEPA (ELV).
///
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token;
/// This init method has to be used with SEPA (ELV) tokens created before April 15th 2015.
/// Please refer to <code>init(token:)</code> for newer tokens.
/// \param token Token for SEPA (ELV). This value was returned for tokens created before April 15th 2015.
///
/// \param bankCode A bank code (German: Bankleitzahl) is a unique identification
/// code for a particular bank. This is required for tokens created before April 15th 2015.
///
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token bankCode:(NSString * _Nonnull)bankCode;
/// A human readable title.
@property (nonatomic, readonly, copy) NSString * _Nonnull displayTitle;
/// For VoiceOver this title is used instead of displayTitle.
@property (nonatomic, readonly, copy) NSString * _Nullable accessibilityTitle;
/// Refer to the <code>NSCopying</code> protocol
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum DTPaymentMethodType)type token:(NSString * _Nonnull)token OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

/// This class gives you options to customize the theme of the library.
/// The library offers by default a theme for light and dark mode. If your app supports
/// both themes too, make sure to use <code>UIColor.init(dynamicProvider:)</code>
/// when creating custom themes.
/// We recommend you to start by customizing <code>linkColor</code> before anything else,
/// as this is often used as a fallback color.
SWIFT_CLASS_NAMED("ThemeConfiguration")
@interface DTThemeConfiguration : NSObject
/// Background color of the navigation bars. If this is not specified, the
/// navigation bars will be transparent.
@property (nonatomic, strong) UIColor * _Nullable barBackgroundColor;
/// Color of the buttons in the navigation bars. If this is not specified,
/// the color will be the color set in <code>linkColor</code>.
@property (nonatomic, strong) UIColor * _Nullable barLinkColor;
/// Color of the title within the navigation bars. If this is not specified,
/// the color will be the text color.
/// The text color is either white or black and cannot be customized.
@property (nonatomic, strong) UIColor * _Nullable barTitleColor;
/// Background color of large buttons, such as the ‘Pay’ button. If this is
/// not specified, the color will be the color set in <code>linkColor</code>.
@property (nonatomic, strong) UIColor * _Nullable buttonColor;
/// Text color of large buttons, such as the ‘Pay’ button. If this is not
/// specified, the color will be set to white.
@property (nonatomic, strong) UIColor * _Nullable buttonTextColor;
/// Color of text-only buttons or links and the text cursor. If this is not
/// specified, the color will be in a blue tone that fits the standard iOS design.
@property (nonatomic, strong) UIColor * _Nullable linkColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DTTokenizationRequestDelegate;
@class DTTokenizationOptions;
@class NSNumber;
@class UIViewController;

/// Use this class to start a tokenization request. After the tokenization request has been
/// completed - regardless if successful or not - <code>delegate</code> will be called with some basic
/// information about the success or failure.
SWIFT_CLASS_NAMED("TokenizationRequest")
@interface DTTokenizationRequest : NSObject
/// This delegate will be notified after a tokenization request has been finished,
/// successfully or not.
@property (nonatomic, weak) id <DTTokenizationRequestDelegate> _Nullable delegate;
/// The available options for how a tokenization request is handled by the mobile SDK.
@property (nonatomic, strong) DTTokenizationOptions * _Nonnull options;
/// The theme to be used by the SDK.
@property (nonatomic, strong) DTThemeConfiguration * _Nonnull theme;
/// Use this init method if you use your own UI and already have a <code>Card</code> instance with the
/// card data to be tokenized. After this class is initialized, you should define its <code>delegate</code>,
/// the <code>options</code> properties and a <code>theme</code> if desired.
/// \param merchantId Your merchantId.
///
/// \param card Card object to tokenize.
///
- (nonnull instancetype)initWithMerchantId:(NSString * _Nonnull)merchantId card:(DTCard * _Nonnull)card OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to allow the user to enter the  card data to be tokenized. After this
/// class is initialized, you should define its <code>delegate</code>, the <code>options</code> properties
/// and a <code>theme</code> if desired.
/// This initializer is for use from Objective-C only. Instead of <code>[PaymentMethodType]</code>, it
/// takes <code>[NSNumber]</code> containing <code>rawValue</code>s of <code>PaymentMethodType</code>.
/// Example:
/// <code>[[DTTokenizationRequest alloc] initWithMerchantId:@"..." paymentMethodTypes:@[@(DTPaymentMethodTypeVisa), @(DTPaymentMethodTypeMasterCard)]];</code>
/// \param merchantId Your merchantId.
///
/// \param paymentMethodTypesObjc The allowed credit or debit card types.
///
- (nonnull instancetype)initWithMerchantId:(NSString * _Nonnull)merchantId paymentMethodTypes:(NSArray<NSNumber *> * _Nonnull)paymentMethodTypesObjc;
/// Starts the SDK and displays any needed user interface using the provided
/// <code>presentingController</code>. Note that a tokenization request can only
/// be started once.
/// \param presentingController <code>UIViewController</code>
/// used to present the user interface during an on-going tokenization request.
///
- (void)startWithPresentingController:(UIViewController * _Nonnull)presentingController;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DTTokenizationRequestError;

/// Implement TokenizationRequestDelegate to be notified when a tokenization
/// request ends. TokenizationRequestDelegate will notify you about the success,
/// error or cancel state of the processed tokenization request.
SWIFT_PROTOCOL_NAMED("TokenizationRequestDelegate")
@protocol DTTokenizationRequestDelegate
/// This is called after a tokenization request has been successfully
/// completed. This callback provides details about the tokenization request.
/// \param tokenizationRequest The object containing the information
/// of the completed tokenization request.
///
/// \param tokenizationId The resulting tokenizationId.
///
- (void)tokenizationRequestDidFinish:(DTTokenizationRequest * _Nonnull)tokenizationRequest tokenizationId:(NSString * _Nonnull)tokenizationId;
/// This is called after a tokenization request fails or encounters an error.
/// Keep in mind that the SDK shows the error to the user before
/// this is invoked. Therefore, this callback can be used to cancel
/// any on-going process involving the tokenization request.
/// You may also use the error details provided here and display it
/// the way you want when suppressing the error message within
/// the <code>TokenizationRequestOptions</code>.
/// \param tokenizationRequest The object containing the information
/// of the failed tokenization request.
///
/// \param error The error that occurred.
///
- (void)tokenizationRequestDidFail:(DTTokenizationRequest * _Nonnull)tokenizationRequest error:(DTTokenizationRequestError * _Nonnull)error;
@optional
/// This is called after a tokenization request has been cancelled. This callback
/// can be used to cancel any on-going process involving the tokenization request.
/// \param tokenizationRequest The object containing the
/// information of the cancelled tokenization request.
///
- (void)tokenizationRequestDidCancel:(DTTokenizationRequest * _Nonnull)tokenizationRequest;
@end


/// This class includes the error message of a tokenization request.
SWIFT_CLASS_NAMED("TokenizationRequestError")
@interface DTTokenizationRequestError : NSError
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class can be used to specify miscellaneous options related to the tokenization request.
SWIFT_CLASS_NAMED("TokenizationRequestOptions")
@interface DTTokenizationOptions : NSObject
/// Use this setting to change the UI language. If this is not
/// specified, the default language determined by the system will be used.
/// The supported values are <code>de</code>, <code>en</code>, <code>fr</code>, <code>it</code> and <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable language;
/// Use this setting to display or hide critical errors.
@property (nonatomic) BOOL suppressCriticalErrorDialog;
/// Use this setting to switch from production to sandbox. If not specified,
/// the SDK will call the Datatrans production environment.
@property (nonatomic) BOOL testing;
/// Whether secure connections to Datatrans servers require a certificate
/// chain signed with a specific CA private key. The device’s trust settings
/// are explicitly ignored, i.e. custom installed/white-listed certificates
/// and/or CAs will not work.
/// Please be advised that enabling this option will break your app in many
/// corporate networks with anti-malware/-theft/-espionage SSL proxying.
@property (nonatomic) BOOL useCertificatePinning;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DTTransactionDelegate;
@class DTTransactionOptions;

/// Use this class to start a transaction with a <code>mobileToken</code> that has previously been initialized
/// with a server-to-server init call. This class is the main class to start any operation with the SDK.
/// After the transaction has been completed - regardless if successful or not - <code>delegate</code> will
/// be called with some basic information about the success or failure.
SWIFT_CLASS_NAMED("Transaction")
@interface DTTransaction : NSObject <DTErrorHandlerDelegate>
/// This delegate will be notified after a transaction has been finished,
/// successfully or not.
@property (nonatomic, weak) id <DTTransactionDelegate> _Nullable delegate;
/// The available options for how a transaction is handled by the mobile SDK.
@property (nonatomic, strong) DTTransactionOptions * _Nonnull options;
/// The theme to be used by the SDK.
@property (nonatomic, strong) DTThemeConfiguration * _Nonnull theme;
/// Use this init method to start the SDK with a mobile token obtained after a server-to-server init
/// call. After this class is initialized, you should define its delegate, the <code>options</code> properties
/// and a <code>theme</code> if desired.
/// \param mobileToken The mobileToken that has previously
/// been initialized with a server-to-server init call.
///
- (nonnull instancetype)initWithMobileToken:(NSString * _Nonnull)mobileToken OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to start the SDK with a mobile token just like in <code>init(mobileToken:)</code>
/// and the provided <code>card</code> for the transaction. For this to work, you can only
/// send one payment method in your server-to-server init call. Use this init method if
/// you use your own UI fields for the card information.
/// \param mobileToken The mobileToken that has previously
/// been initialized with a server-to-server init call.
///
/// \param card Card object used for the transaction.
///
- (nonnull instancetype)initWithMobileToken:(NSString * _Nonnull)mobileToken card:(DTCard * _Nonnull)card OBJC_DESIGNATED_INITIALIZER;
/// Use this init method to start the SDK with a mobile token obtained after a server-to-server init
/// call and display the selection of one or more saved tokens. The user will then be able to click
/// on their desired saved token to finalize the payment.
/// \param mobileToken The mobileToken that has previously
/// been initialized with a server-to-server init call.
///
/// \param paymentMethodTokens Specify here the tokens that are
/// available for selection to the user.
///
- (nonnull instancetype)initWithMobileToken:(NSString * _Nonnull)mobileToken paymentMethodTokens:(NSArray<DTPaymentMethodToken *> * _Nonnull)paymentMethodTokens OBJC_DESIGNATED_INITIALIZER;
/// Starts the SDK and displays any needed user interface using the
/// provided <code>presentingController</code>. Note that a transaction
/// can only be started once.
/// \param presentingController <code>UIViewController</code>
/// used to present the user interface during an on-going transaction
///
- (void)startWithPresentingController:(UIViewController * _Nonnull)presentingController;
/// :nodoc:
- (void)didHandleError:(NSError * _Nonnull)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DTTransactionSuccess;
@class DTTransactionError;

/// Implement TransactionDelegate to be notified when a transaction
/// ends. TransactionDelegate will notify you about the success, error
/// or cancel state of the processed transaction.
SWIFT_PROTOCOL_NAMED("TransactionDelegate")
@protocol DTTransactionDelegate
/// This is called after a transaction has been successfully
/// completed. This callback provides details about the transaction.
/// \param transaction The object containing the information
/// of the completed transaction.
///
/// \param result The object including the information related
/// to the transaction success.
///
- (void)transactionDidFinish:(DTTransaction * _Nonnull)transaction result:(DTTransactionSuccess * _Nonnull)result;
/// This is called after a transaction fails or encounters an error.
/// Keep in mind that the SDK shows the error to the user before
/// this is invoked. Therefore, this callback can be used to cancel
/// any on-going process involving the transaction.
/// You may also use the error details provided here and display it
/// the way you want when suppressing the error message within
/// the TransactionOptions.
/// \param transaction The object containing the information
/// of the failed transaction.
///
/// \param error The error that occurred.
///
- (void)transactionDidFail:(DTTransaction * _Nonnull)transaction error:(DTTransactionError * _Nonnull)error;
@optional
/// This is called after a transaction has been cancelled. This callback
/// can be used to cancel any on-going process involving the transaction.
/// Some payment methods - such as Twint that involves an app-switch -
/// also call this method when a payment error or decline occurs, to
/// prevent showing an error dialog twice, as an error is already
/// displayed in the payment application.
/// \param transaction The object containing the
/// information of the cancelled transaction.
///
- (void)transactionDidCancel:(DTTransaction * _Nonnull)transaction;
@end


/// This class includes the error message and other details of a transaction.
SWIFT_CLASS_NAMED("TransactionError")
@interface DTTransactionError : NSError
/// The payment method used during the transaction.
/// This is for use from Objective-C only. This property wraps the
/// <code>rawValue</code> of a <code>DTPaymentMethodType</code> in an <code>NSNumber</code>.
@property (nonatomic, readonly, strong) NSNumber * _Nullable paymentMethodType;
/// The identifier of the failed transaction
@property (nonatomic, readonly, copy) NSString * _Nullable transactionId;
/// Refer to the <code>NSCopying</code> protocol
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class can be used to specify miscellaneous options related to the transaction.
SWIFT_CLASS_NAMED("TransactionOptions")
@interface DTTransactionOptions : NSObject
/// Your unique URL scheme to be used by other apps (e.g. Twint)
/// to return to the merchant app.
@property (nonatomic, copy) NSString * _Nullable appCallbackScheme;
/// Specify the <code>ApplePayConfig</code> object here. This is mandatory
/// for Apple Pay transactions.
@property (nonatomic, strong) DTApplePayConfig * _Nullable applePayConfig;
/// :nodoc:
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable merchantProperties;
/// Use this setting to display or hide critical and transaction errors.
@property (nonatomic) BOOL suppressCriticalErrorDialog;
/// Use this setting to switch from production to sandbox. If not specified,
/// the SDK will call the Datatrans production environment.
@property (nonatomic) BOOL testing;
/// Whether secure connections to datatrans servers require a certificate
/// chain signed with a specific CA private key. The device’s trust settings
/// are explicitly ignored, i.e. custom installed/white-listed certificates
/// and/or CAs will not work.
/// Please be advised that enabling this option will break your app in many
/// corporate networks with anti-malware/-theft/-espionage SSL proxying.
@property (nonatomic) BOOL useCertificatePinning;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class includes the success message and other details of a transaction.
/// You will also obtain a transactionId that you can use for operations
/// after the transaction (e.g. settlement, cancel or refund requests).
SWIFT_CLASS_NAMED("TransactionSuccess")
@interface DTTransactionSuccess : NSObject
/// The payment method used during the transaction.
@property (nonatomic, readonly) enum DTPaymentMethodType paymentMethodType;
/// Object containing the token details of the payment method.
/// The token details are also returned to your webhook and can
/// be accessed with a status server-to-server request.
@property (nonatomic, readonly, strong) DTPaymentMethodToken * _Nullable paymentMethodToken;
/// The transactionId that you can use for operations after the
/// transaction (eg. settlement, cancel or refund requests).
@property (nonatomic, readonly, copy) NSString * _Nonnull transactionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
